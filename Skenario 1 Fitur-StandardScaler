{"cells":[{"cell_type":"markdown","metadata":{"id":"ZiI0hr6zaSKY"},"source":["**Tentang Dataset**\n","\n","Penyakit kardiovaskular (CVDs) adalah penyebab kematian nomor 1 secara global , mengambil sekitar 17,9 juta jiwa setiap tahun , yang menyumbang 31% dari semua kematian di seluruh dunia .\n","Gagal jantung adalah kejadian umum yang disebabkan oleh CVD dan kumpulan data ini berisi 12 fitur yang dapat digunakan untuk memprediksi kematian akibat gagal jantung.\n","\n","Sebagian besar penyakit kardiovaskular dapat dicegah dengan mengatasi faktor risiko perilaku seperti penggunaan tembakau, diet tidak sehat dan obesitas, kurangnya aktivitas fisik, dan penggunaan alkohol yang berbahaya menggunakan strategi di seluruh populasi.\n","\n","Orang dengan penyakit kardiovaskular atau yang berada pada risiko kardiovaskular tinggi (karena adanya satu atau lebih faktor risiko seperti hipertensi, diabetes, hiperlipidemia atau penyakit yang sudah ada) memerlukan deteksi dan manajemen dini di mana model pembelajaran mesin dapat sangat membantu.\n","\n","**Informasi atribut:**\n","- Usia\n","- Penurunan sel darah merah atau hemoglobin (boolean)\n","- Tingkat enzim CPK dalam darah (mcg/L)\n","- Jika pasien menderita diabetes (boolean)\n","- Persentase darah yang meninggalkan jantung pada setiap kontraksi (persentase)\n","- Jika pasien memiliki hipertensi (boolean)\n","- Trombosit dalam darah (kiloplatelet/mL)\n","- Kadar kreatinin serum dalam darah (mg/dL)\n","- Kadar natrium serum dalam darah (mEq/L)\n","- Wanita atau pria (biner)"]},{"cell_type":"markdown","metadata":{"id":"0We9fkKHC2zJ"},"source":["***Note**\n","\n","Ada 2 kolom yang tidak bisa dijadikan fitur:\n","- **DEATH_EVENT**, mengkodekan apakah pasien meninggal (1) atau apakah mereka disensor (0). Menyensor berarti bahwa para ilmuwan kehilangan kontak dengan pasien.\n","\n","- **time**, menangkap waktu kejadian. Artinya, waktu di mana pasien meninggal atau disensor.\n","\n","time sangat berkorelasi dengan DEATH_EVENT karena kematian pasien berdampak langsung pada waktu, bukan sebaliknya . Jika tujuannya adalah untuk memprediksi kematian atau kelangsungan hidup pasien, maka time tidak boleh digunakan sebagai input model."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2731,"status":"ok","timestamp":1674453829351,"user":{"displayName":"NABILA ZULFIKA HEMADEWI -","userId":"12229229067340115993"},"user_tz":-420},"id":"Y67VHfrJ1Zg_","outputId":"825d8470-f68c-486e-963b-2cf5f5cbca83"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"markdown","metadata":{"id":"a_QyizIdAJJD"},"source":["# Preparing Data"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3-O7cLlaUKcW"},"outputs":[],"source":["import pandas as pd\n","\n","# EDA\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","%matplotlib inline\n","\n","# labelEncoder\n","from sklearn.preprocessing import LabelEncoder\n","\n","# scaling data\n","from sklearn.preprocessing import StandardScaler\n","\n","# ADASYN\n","from imblearn.over_sampling import ADASYN\n","\n","# splitting data\n","from sklearn.model_selection import train_test_split\n","from sklearn.model_selection import KFold\n","\n","# modelling\n","from sklearn.ensemble import RandomForestClassifier\n","\n","# evaluation\n","from sklearn.metrics import plot_confusion_matrix\n","from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BUxPv-WZUWNt"},"outputs":[],"source":["df = pd.read_csv(\"/content/drive/MyDrive/heart_failure_clinical_records_dataset.csv\")"]},{"cell_type":"markdown","metadata":{"id":"jml89CtqA-se"},"source":["# Checking Data\n","\n","Kolom **DEATH_EVENT** adalah kolom yang akan kita jadikan target prediksi. Mari kita lakukan **rename** menjadi **target**."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":55,"status":"ok","timestamp":1674453830446,"user":{"displayName":"NABILA ZULFIKA HEMADEWI -","userId":"12229229067340115993"},"user_tz":-420},"id":"wr6_FyklAuyE","outputId":"93ffbdf6-51ae-407c-c944-761cdd678a7f"},"outputs":[{"output_type":"stream","name":"stdout","text":["(299, 13)\n"]}],"source":["print(df.shape)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":270},"executionInfo":{"elapsed":53,"status":"ok","timestamp":1674453830449,"user":{"displayName":"NABILA ZULFIKA HEMADEWI -","userId":"12229229067340115993"},"user_tz":-420},"id":"lQzqVM64UmBn","outputId":"f32ce3c7-2042-423d-ef8c-3f762f3a9198"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["    age  anaemia  creatinine_phosphokinase  diabetes  ejection_fraction  \\\n","0  75.0        0                       582         0                 20   \n","1  55.0        0                      7861         0                 38   \n","2  65.0        0                       146         0                 20   \n","3  50.0        1                       111         0                 20   \n","4  65.0        1                       160         1                 20   \n","\n","   high_blood_pressure  platelets  serum_creatinine  serum_sodium  sex  \\\n","0                    1  265000.00               1.9           130    1   \n","1                    0  263358.03               1.1           136    1   \n","2                    0  162000.00               1.3           129    1   \n","3                    0  210000.00               1.9           137    1   \n","4                    0  327000.00               2.7           116    0   \n","\n","   smoking  time  DEATH_EVENT  \n","0        0     4            1  \n","1        0     6            1  \n","2        1     7            1  \n","3        0     7            1  \n","4        0     8            1  "],"text/html":["\n","  <div id=\"df-956fd930-abf9-43b1-9d71-be95206ba1bd\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>anaemia</th>\n","      <th>creatinine_phosphokinase</th>\n","      <th>diabetes</th>\n","      <th>ejection_fraction</th>\n","      <th>high_blood_pressure</th>\n","      <th>platelets</th>\n","      <th>serum_creatinine</th>\n","      <th>serum_sodium</th>\n","      <th>sex</th>\n","      <th>smoking</th>\n","      <th>time</th>\n","      <th>DEATH_EVENT</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>75.0</td>\n","      <td>0</td>\n","      <td>582</td>\n","      <td>0</td>\n","      <td>20</td>\n","      <td>1</td>\n","      <td>265000.00</td>\n","      <td>1.9</td>\n","      <td>130</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>4</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>55.0</td>\n","      <td>0</td>\n","      <td>7861</td>\n","      <td>0</td>\n","      <td>38</td>\n","      <td>0</td>\n","      <td>263358.03</td>\n","      <td>1.1</td>\n","      <td>136</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>6</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>65.0</td>\n","      <td>0</td>\n","      <td>146</td>\n","      <td>0</td>\n","      <td>20</td>\n","      <td>0</td>\n","      <td>162000.00</td>\n","      <td>1.3</td>\n","      <td>129</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>7</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>50.0</td>\n","      <td>1</td>\n","      <td>111</td>\n","      <td>0</td>\n","      <td>20</td>\n","      <td>0</td>\n","      <td>210000.00</td>\n","      <td>1.9</td>\n","      <td>137</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>7</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>65.0</td>\n","      <td>1</td>\n","      <td>160</td>\n","      <td>1</td>\n","      <td>20</td>\n","      <td>0</td>\n","      <td>327000.00</td>\n","      <td>2.7</td>\n","      <td>116</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-956fd930-abf9-43b1-9d71-be95206ba1bd')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-956fd930-abf9-43b1-9d71-be95206ba1bd button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-956fd930-abf9-43b1-9d71-be95206ba1bd');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":5}],"source":["df.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":53,"status":"ok","timestamp":1674453830451,"user":{"displayName":"NABILA ZULFIKA HEMADEWI -","userId":"12229229067340115993"},"user_tz":-420},"id":"d-CgH_EQAxEK","outputId":"bdf613e6-9545-4447-ffd2-9368ead08181"},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 299 entries, 0 to 298\n","Data columns (total 13 columns):\n"," #   Column                    Non-Null Count  Dtype  \n","---  ------                    --------------  -----  \n"," 0   age                       299 non-null    float64\n"," 1   anaemia                   299 non-null    int64  \n"," 2   creatinine_phosphokinase  299 non-null    int64  \n"," 3   diabetes                  299 non-null    int64  \n"," 4   ejection_fraction         299 non-null    int64  \n"," 5   high_blood_pressure       299 non-null    int64  \n"," 6   platelets                 299 non-null    float64\n"," 7   serum_creatinine          299 non-null    float64\n"," 8   serum_sodium              299 non-null    int64  \n"," 9   sex                       299 non-null    int64  \n"," 10  smoking                   299 non-null    int64  \n"," 11  time                      299 non-null    int64  \n"," 12  DEATH_EVENT               299 non-null    int64  \n","dtypes: float64(3), int64(10)\n","memory usage: 30.5 KB\n"]}],"source":["df.info()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FLnshklova3K"},"outputs":[],"source":["df = df.rename(columns={\"DEATH_EVENT\": \"target\"})"]},{"cell_type":"markdown","metadata":{"id":"eiaJNo6JBBdZ"},"source":["**Cek apakah ada nilai null atau tidak.**"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":48,"status":"ok","timestamp":1674453830454,"user":{"displayName":"NABILA ZULFIKA HEMADEWI -","userId":"12229229067340115993"},"user_tz":-420},"id":"ualOMtL7A5gY","outputId":"9ab8fe9e-b2a3-4202-cde8-26dbd86b69ed"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["age                         0\n","anaemia                     0\n","creatinine_phosphokinase    0\n","diabetes                    0\n","ejection_fraction           0\n","high_blood_pressure         0\n","platelets                   0\n","serum_creatinine            0\n","serum_sodium                0\n","sex                         0\n","smoking                     0\n","time                        0\n","target                      0\n","dtype: int64"]},"metadata":{},"execution_count":8}],"source":["df.isnull().sum()"]},{"cell_type":"markdown","metadata":{"id":"8XDUcMlHBFg7"},"source":["**Cek apakah ada nilai duplikat atau tidak.**"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":45,"status":"ok","timestamp":1674453830456,"user":{"displayName":"NABILA ZULFIKA HEMADEWI -","userId":"12229229067340115993"},"user_tz":-420},"id":"QYoTbWjjAzK6","outputId":"0dc33cc0-dc00-4767-b020-d92c7d475f53"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":9}],"source":["df.duplicated().sum()"]},{"cell_type":"markdown","metadata":{"id":"E9ZyG3ExBWws"},"source":["**Cek statistik deskriptif dataframe.**"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":364},"executionInfo":{"elapsed":43,"status":"ok","timestamp":1674453830458,"user":{"displayName":"NABILA ZULFIKA HEMADEWI -","userId":"12229229067340115993"},"user_tz":-420},"id":"Eh2_C86GBTD9","outputId":"1740d9b1-5078-41ed-8acd-ca0a41647736"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["              age     anaemia  creatinine_phosphokinase    diabetes  \\\n","count  299.000000  299.000000                299.000000  299.000000   \n","mean    60.833893    0.431438                581.839465    0.418060   \n","std     11.894809    0.496107                970.287881    0.494067   \n","min     40.000000    0.000000                 23.000000    0.000000   \n","25%     51.000000    0.000000                116.500000    0.000000   \n","50%     60.000000    0.000000                250.000000    0.000000   \n","75%     70.000000    1.000000                582.000000    1.000000   \n","max     95.000000    1.000000               7861.000000    1.000000   \n","\n","       ejection_fraction  high_blood_pressure      platelets  \\\n","count         299.000000           299.000000     299.000000   \n","mean           38.083612             0.351171  263358.029264   \n","std            11.834841             0.478136   97804.236869   \n","min            14.000000             0.000000   25100.000000   \n","25%            30.000000             0.000000  212500.000000   \n","50%            38.000000             0.000000  262000.000000   \n","75%            45.000000             1.000000  303500.000000   \n","max            80.000000             1.000000  850000.000000   \n","\n","       serum_creatinine  serum_sodium         sex    smoking        time  \\\n","count         299.00000    299.000000  299.000000  299.00000  299.000000   \n","mean            1.39388    136.625418    0.648829    0.32107  130.260870   \n","std             1.03451      4.412477    0.478136    0.46767   77.614208   \n","min             0.50000    113.000000    0.000000    0.00000    4.000000   \n","25%             0.90000    134.000000    0.000000    0.00000   73.000000   \n","50%             1.10000    137.000000    1.000000    0.00000  115.000000   \n","75%             1.40000    140.000000    1.000000    1.00000  203.000000   \n","max             9.40000    148.000000    1.000000    1.00000  285.000000   \n","\n","          target  \n","count  299.00000  \n","mean     0.32107  \n","std      0.46767  \n","min      0.00000  \n","25%      0.00000  \n","50%      0.00000  \n","75%      1.00000  \n","max      1.00000  "],"text/html":["\n","  <div id=\"df-d0b73641-93f0-4d23-9647-968ea11efff8\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>anaemia</th>\n","      <th>creatinine_phosphokinase</th>\n","      <th>diabetes</th>\n","      <th>ejection_fraction</th>\n","      <th>high_blood_pressure</th>\n","      <th>platelets</th>\n","      <th>serum_creatinine</th>\n","      <th>serum_sodium</th>\n","      <th>sex</th>\n","      <th>smoking</th>\n","      <th>time</th>\n","      <th>target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>299.000000</td>\n","      <td>299.000000</td>\n","      <td>299.000000</td>\n","      <td>299.000000</td>\n","      <td>299.000000</td>\n","      <td>299.000000</td>\n","      <td>299.000000</td>\n","      <td>299.00000</td>\n","      <td>299.000000</td>\n","      <td>299.000000</td>\n","      <td>299.00000</td>\n","      <td>299.000000</td>\n","      <td>299.00000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>60.833893</td>\n","      <td>0.431438</td>\n","      <td>581.839465</td>\n","      <td>0.418060</td>\n","      <td>38.083612</td>\n","      <td>0.351171</td>\n","      <td>263358.029264</td>\n","      <td>1.39388</td>\n","      <td>136.625418</td>\n","      <td>0.648829</td>\n","      <td>0.32107</td>\n","      <td>130.260870</td>\n","      <td>0.32107</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>11.894809</td>\n","      <td>0.496107</td>\n","      <td>970.287881</td>\n","      <td>0.494067</td>\n","      <td>11.834841</td>\n","      <td>0.478136</td>\n","      <td>97804.236869</td>\n","      <td>1.03451</td>\n","      <td>4.412477</td>\n","      <td>0.478136</td>\n","      <td>0.46767</td>\n","      <td>77.614208</td>\n","      <td>0.46767</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>40.000000</td>\n","      <td>0.000000</td>\n","      <td>23.000000</td>\n","      <td>0.000000</td>\n","      <td>14.000000</td>\n","      <td>0.000000</td>\n","      <td>25100.000000</td>\n","      <td>0.50000</td>\n","      <td>113.000000</td>\n","      <td>0.000000</td>\n","      <td>0.00000</td>\n","      <td>4.000000</td>\n","      <td>0.00000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>51.000000</td>\n","      <td>0.000000</td>\n","      <td>116.500000</td>\n","      <td>0.000000</td>\n","      <td>30.000000</td>\n","      <td>0.000000</td>\n","      <td>212500.000000</td>\n","      <td>0.90000</td>\n","      <td>134.000000</td>\n","      <td>0.000000</td>\n","      <td>0.00000</td>\n","      <td>73.000000</td>\n","      <td>0.00000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>60.000000</td>\n","      <td>0.000000</td>\n","      <td>250.000000</td>\n","      <td>0.000000</td>\n","      <td>38.000000</td>\n","      <td>0.000000</td>\n","      <td>262000.000000</td>\n","      <td>1.10000</td>\n","      <td>137.000000</td>\n","      <td>1.000000</td>\n","      <td>0.00000</td>\n","      <td>115.000000</td>\n","      <td>0.00000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>70.000000</td>\n","      <td>1.000000</td>\n","      <td>582.000000</td>\n","      <td>1.000000</td>\n","      <td>45.000000</td>\n","      <td>1.000000</td>\n","      <td>303500.000000</td>\n","      <td>1.40000</td>\n","      <td>140.000000</td>\n","      <td>1.000000</td>\n","      <td>1.00000</td>\n","      <td>203.000000</td>\n","      <td>1.00000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>95.000000</td>\n","      <td>1.000000</td>\n","      <td>7861.000000</td>\n","      <td>1.000000</td>\n","      <td>80.000000</td>\n","      <td>1.000000</td>\n","      <td>850000.000000</td>\n","      <td>9.40000</td>\n","      <td>148.000000</td>\n","      <td>1.000000</td>\n","      <td>1.00000</td>\n","      <td>285.000000</td>\n","      <td>1.00000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d0b73641-93f0-4d23-9647-968ea11efff8')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-d0b73641-93f0-4d23-9647-968ea11efff8 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-d0b73641-93f0-4d23-9647-968ea11efff8');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":10}],"source":["df.describe()"]},{"cell_type":"markdown","source":["# Preprocessing Data"],"metadata":{"id":"shlwJnBylK39"}},{"cell_type":"code","source":["le = LabelEncoder()\n","\n","df['anaemia'] = le.fit_transform(df['anaemia'])\n","df['diabetes'] = le.fit_transform(df['diabetes'])\n","df['high_blood_pressure'] = le.fit_transform(df['high_blood_pressure'])\n","df['sex'] = le.fit_transform(df['sex'])\n","df['smoking'] = le.fit_transform(df['smoking'])\n","df['target'] = le.fit_transform(df['target'])\n","\n","df.to_csv(\"df_encode.csv\")"],"metadata":{"id":"4me0QK-2ZhtU"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Feature Importance"],"metadata":{"id":"8xRdSrWP8q_1"}},{"cell_type":"code","source":["X = df.drop(['target'], axis=1)\n","y = df['target']\n","\n","from sklearn.ensemble import RandomForestClassifier\n","model = RandomForestClassifier()\n","model.fit(X,y)\n","print(model.feature_importances_) \n","\n","#plot the graph of feature importances \n","feat_importances = pd.Series(model.feature_importances_, index=X.columns)\n","plt.figure(figsize=(10,5))\n","feat_importances.nlargest(1).plot(kind='barh')\n","plt.title(\"Fitur yang Paling Mempengaruhi Target\")\n","\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":371},"id":"g5_4zbl8uteI","executionInfo":{"status":"ok","timestamp":1674453833123,"user_tz":-420,"elapsed":861,"user":{"displayName":"NABILA ZULFIKA HEMADEWI -","userId":"12229229067340115993"}},"outputId":"cbf3e789-f546-4f40-bcec-c401913aab8a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[0.09522516 0.01013374 0.08462142 0.0115565  0.12292049 0.0119954\n"," 0.08245265 0.13954676 0.07565124 0.01007486 0.01297655 0.34284524]\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 720x360 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["## Feature Scalling"],"metadata":{"id":"YjCcK-739p4b"}},{"cell_type":"code","source":["final_df = df[['time']]"],"metadata":{"id":"-DaNSmee9sLw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["scaler = StandardScaler()\n","X = scaler.fit(final_df)\n","X = scaler.transform(final_df)\n","y = df['target']"],"metadata":{"id":"4MdQ4ikj9veK"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FdJDruzEEjOA"},"source":["## Cek keseimbangan data target."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":61,"status":"ok","timestamp":1674453833135,"user":{"displayName":"NABILA ZULFIKA HEMADEWI -","userId":"12229229067340115993"},"user_tz":-420},"id":"jM0TGPVo6fVy","outputId":"107a78a6-0e94-4a59-a0d8-1785775291ec"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    203\n","1     96\n","Name: target, dtype: int64"]},"metadata":{},"execution_count":16}],"source":["df['target'].value_counts()"]},{"cell_type":"markdown","metadata":{"id":"jdVrayGfW5bD"},"source":["Dari informasi diatas, diketahui bahwa kumpulan **data tidak seimbang**. Kita perlu menyeimbangkannya dulu sebelum melakukan modelling terhadap data."]},{"cell_type":"markdown","metadata":{"id":"sQYGYz3_X_So"},"source":["Tujuan kita adalah untuk memprediksi kematian pasien, maka time tidak boleh \n","\n","---\n","\n","digunakan sebagai input model/fitur."]},{"cell_type":"markdown","metadata":{"id":"MFyUfNY4WRJ-"},"source":["## Mengatasi ketimpangan kelas dengan teknik oversampling kelas minoritas \n","\n","Metode ini mirip dengan SMOTE tetapi menghasilkan jumlah sampel yang berbeda tergantung pada perkiraan distribusi lokal kelas yang akan di-oversampling."]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":56,"status":"ok","timestamp":1674453833136,"user":{"displayName":"NABILA ZULFIKA HEMADEWI -","userId":"12229229067340115993"},"user_tz":-420},"id":"D1YNNYwwX0Op","colab":{"base_uri":"https://localhost:8080/"},"outputId":"61cf4671-b5c8-4110-8230-4656002f8fe1"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["1    211\n","0    203\n","Name: target, dtype: int64"]},"metadata":{},"execution_count":17}],"source":["resample = ADASYN(sampling_strategy='all', random_state=42)\n","X, y = resample.fit_resample(X,y)\n","\n","y.value_counts()"]},{"cell_type":"markdown","metadata":{"id":"E-8TRVymvG3w"},"source":["## KFold Cross Validation"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"g8btx1uzYzsK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1674453833137,"user_tz":-420,"elapsed":51,"user":{"displayName":"NABILA ZULFIKA HEMADEWI -","userId":"12229229067340115993"}},"outputId":"0f710ab8-7c9b-4387-b390-f414fded7ca7"},"outputs":[{"output_type":"stream","name":"stdout","text":["Fold:1, Train set: 372, Test set:42\n","Fold:2, Train set: 372, Test set:42\n","Fold:3, Train set: 372, Test set:42\n","Fold:4, Train set: 372, Test set:42\n","Fold:5, Train set: 373, Test set:41\n","Fold:6, Train set: 373, Test set:41\n","Fold:7, Train set: 373, Test set:41\n","Fold:8, Train set: 373, Test set:41\n","Fold:9, Train set: 373, Test set:41\n","Fold:10, Train set: 373, Test set:41\n"]}],"source":["kf = KFold(n_splits=10, shuffle=True, random_state=42)\n","cnt = 1\n","\n","for train_index, test_index in kf.split(X, y):\n","  print(f'Fold:{cnt}, Train set: {len(train_index)}, Test set:{len(test_index)}')\n","  cnt += 1"]},{"cell_type":"markdown","metadata":{"id":"Bre-Mm5CLLtd"},"source":["# Accuracy"]},{"cell_type":"code","source":["classifier_rf = RandomForestClassifier()\n","\n","accuracy   = []\n","\n","for train_index, test_index in skf.split(X, y):\n","  X_train, X_test = X[train_index], X[test_index]\n","  y_train, y_test = y[train_index], y[test_index]\n"," \n","  classifier_rf.fit(X_train,y_train)\n","  y_pred3 = classifier_rf.predict(X_test)\n","\n","  ac = accuracy_score(y_test,y_pred3)\n","\n","  accuracy.append(ac)\n","\n","print(accuracy)\n","print(ac)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"B8iPBzURbbJv","executionInfo":{"status":"ok","timestamp":1674453836747,"user_tz":-420,"elapsed":3645,"user":{"displayName":"NABILA ZULFIKA HEMADEWI -","userId":"12229229067340115993"}},"outputId":"9147dea1-0ee6-48ee-9bf1-addb979725ab"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[0.6428571428571429, 0.8095238095238095, 0.7380952380952381, 0.7619047619047619, 0.8292682926829268, 0.7804878048780488, 0.7073170731707317, 0.7804878048780488, 0.7560975609756098, 0.7560975609756098]\n","0.7560975609756098\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":25,"status":"ok","timestamp":1674453840568,"user":{"displayName":"NABILA ZULFIKA HEMADEWI -","userId":"12229229067340115993"},"user_tz":-420},"id":"cM_OUuHclgar","colab":{"base_uri":"https://localhost:8080/"},"outputId":"7ae8b999-1238-4bee-a297-556cf2a3af39"},"outputs":[{"output_type":"stream","name":"stdout","text":["Logistic Regression: 75.60975609756098\n","Decision Tree: 75.60975609756098\n","Random Forest: 75.60975609756098\n","SVM: 70.73170731707317\n","Naive Bayes: 75.60975609756098\n","KNN: 82.92682926829268\n","XGB: 80.48780487804879\n","Extra Trees Classifier: 75.60975609756098\n"]}],"source":["print(\"Random Forest:\", accuracy_score(y_test, y_pred3)*100)"]},{"cell_type":"markdown","metadata":{"id":"LfZJD0oIYFuM"},"source":["# Confusion Matrix & Classification Report"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":575,"status":"ok","timestamp":1674453843050,"user":{"displayName":"NABILA ZULFIKA HEMADEWI -","userId":"12229229067340115993"},"user_tz":-420},"id":"tsmJlY0ADAbM","colab":{"base_uri":"https://localhost:8080/","height":351},"outputId":"315963db-fa27-4e35-c9a4-fefc278d6a8c"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.8/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_confusion_matrix is deprecated; Function `plot_confusion_matrix` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: ConfusionMatrixDisplay.from_predictions or ConfusionMatrixDisplay.from_estimator.\n","  warnings.warn(msg, category=FutureWarning)\n"]},{"output_type":"execute_result","data":{"text/plain":["<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7fc90459aee0>"]},"metadata":{},"execution_count":34},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}],"source":["plot_confusion_matrix(classifier_rf, X_test, y_test)"]},{"cell_type":"code","source":["plot_confusion_matrix(classifier_rf, X, y)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":351},"id":"3pG422-zB6UN","executionInfo":{"status":"ok","timestamp":1674453843534,"user_tz":-420,"elapsed":495,"user":{"displayName":"NABILA ZULFIKA HEMADEWI -","userId":"12229229067340115993"}},"outputId":"145c35b1-9967-4db3-9d2c-da71427ba53c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.8/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_confusion_matrix is deprecated; Function `plot_confusion_matrix` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: ConfusionMatrixDisplay.from_predictions or ConfusionMatrixDisplay.from_estimator.\n","  warnings.warn(msg, category=FutureWarning)\n"]},{"output_type":"execute_result","data":{"text/plain":["<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7fc904443c70>"]},"metadata":{},"execution_count":35},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":15,"status":"ok","timestamp":1674453843536,"user":{"displayName":"NABILA ZULFIKA HEMADEWI -","userId":"12229229067340115993"},"user_tz":-420},"id":"nmgAtNkDzMZZ","colab":{"base_uri":"https://localhost:8080/"},"outputId":"5f6bb019-73a2-40d3-b462-22b8b5cc9172"},"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.71      0.85      0.77        20\n","           1       0.82      0.67      0.74        21\n","\n","    accuracy                           0.76        41\n","   macro avg       0.77      0.76      0.75        41\n","weighted avg       0.77      0.76      0.75        41\n","\n"]}],"source":["# Random Forest\n","print(classification_report(y_test, y_pred3))"]}],"metadata":{"colab":{"provenance":[{"file_id":"1_-sZAhYIShH3sLAA5ybHG-7Z56soncmB","timestamp":1674453441169},{"file_id":"1GkcqOLvKCt8smbdwrz873HDbewABq_2d","timestamp":1674389444051},{"file_id":"1zVx3WHjJwof22D1AJyf1Fwh2ooisMWYe","timestamp":1674388967777},{"file_id":"1D2XnMx6SdeOlokPd1bP9IriXrwaX23h4","timestamp":1674388709369},{"file_id":"1GwLP3y4ltWcpC4CxQ4pBCiP5T9IWTkrx","timestamp":1674388486319},{"file_id":"19hhQ3aWw2D_aG6BpshfBYe8JoBGnrLWP","timestamp":1674388205732},{"file_id":"1wJaHzB8jNaQiGDa9VaDv5_NXq92o7Znp","timestamp":1674387974672},{"file_id":"1l6woLaiJ0HOH2e_BuqK93O6qN2khRF5h","timestamp":1674387791540},{"file_id":"1DZOIUby8_CMcWZmC8ibkyc0w5wVyq9Ux","timestamp":1674387583849},{"file_id":"1hSfrZzX-pKd7DtatP8md8robtL9KnB7p","timestamp":1674387053766},{"file_id":"1eiuNggwfDc2RXjD_d_ZZwldPX6FS2DTW","timestamp":1674376319733},{"file_id":"1tpN3P0Ee44UhRqVGrjx12okLaKplvvOU","timestamp":1674375933311},{"file_id":"1dIkTyLZ7WZ5SgedZ8uPkaXCfRau6YUK1","timestamp":1654327695902},{"file_id":"1svcn3xb86_JYG3G4dafwK0egqFP2rn4N","timestamp":1653793215473},{"file_id":"1GeujmOR-UA49_3ScJZria4Y7rOs9kCyQ","timestamp":1653738384094},{"file_id":"1rh3g9QFG0FzWwQQCg06lpEnMqrUhw5jx","timestamp":1653442135495}],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}